  version: '3'
  x-airflow-common:
    &airflow-common
    build: './docker/airflow'
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: '60'
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: '60'
      AIRFLOW__WEBSERVER__WORKERS: '2'
      AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT: '300'


    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins

    env_file:
      - ./.env
    user: "50000:50000"
    mem_limit: 4000m
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - etl_network

  services:
    postgres:
      image: postgres:13
      environment:
        POSTGRES_USER: airflow
        POSTGRES_PASSWORD: airflow
        POSTGRES_DB: airflow
      volumes:
        - postgres-db-volume:/var/lib/postgresql/data
      healthcheck:
        test: [ "CMD", "pg_isready", "-U", "airflow" ]
        interval: 5s
        retries: 5
      restart: always
      networks:
        - etl_network

    redis:
      image: redis:latest
      ports:
        - 6379:6379
      healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 10s
        timeout: 30s
        retries: 50
      restart: always
      networks:
        - etl_network

    airflow-webserver:
      <<: *airflow-common
      command: webserver
      ports:
        - 8080:8080
      healthcheck:
        test:
          [
            "CMD",
            "curl",
            "--fail",
            "http://localhost:8080/health"
          ]
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always

    airflow-scheduler:
      <<: *airflow-common
      command: scheduler
      healthcheck:
        test:
          [
            "CMD-SHELL",
            'airflow jobs check --job-type SchedulerJob --hostname
              "8793{HOSTNAME}"'
          ]
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always

    airflow-worker:
      <<: *airflow-common
      command: celery worker
      healthcheck:
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.executors.celery_executor.app inspect ping -d
            "celery@8793{HOSTNAME}"'
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always

    airflow-init:
      <<: *airflow-common
      command: version
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_UPGRADE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: airflow
        _AIRFLOW_WWW_USER_PASSWORD: airflow

    flower:
      <<: *airflow-common
      command: celery flower
      ports:
        - 5555:5555
      healthcheck:
        test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always

    database:
      build: './docker/db_backend'
      container_name: database
      ports:
        - "5440:${POSTGRES_PORT}"
      expose:
        - "${POSTGRES_PORT}"
      environment:
        POSTGRES_DB: "${POSTGRES_DB}"
        POSTGRES_HOST: "${POSTGRES_HOST}"
        POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        POSTGRES_PORT: "${POSTGRES_PORT}"
        POSTGRES_USER: "${POSTGRES_USER}"
      healthcheck:
        test:
          [
            "CMD",
            "pg_isready",
            "-U",
            "${POSTGRES_USER}",
            "-d",
            "${POSTGRES_DB}"
          ]
        interval: 5s
        retries: 5
      restart: always
      networks:
        - etl_network

  volumes:
    postgres-db-volume: null
  networks:
    etl_network: null

